Turbo Assembler	 Version 2.0	    05/03/18 02:29:31	    Page 1
p4a.asm



      1				     ;**************************************************************************
      2				     ; MICROPROCESSOR-BASED SYSTEMS
      3				     ; LAB SESSION 4
      4				     ; FILE: p4a.asm
      5				     ; AUTHORS:	Emilio Cuesta Fernandez	- Alejandro Sanchez Sanz
      6				     ; COUPLE NUMBER: 8
      7				     ; GROUP: 2351
      8				     ;**************************************************************************
      9
     10
     11
     12				     ;**************************************************************************
     13				     ; CODE SEGMENT DEFINITION
     14	0000			     CODE SEGMENT
     15					     ASSUME CS:	CODE
     16					     ; First assembly instruction must be after	the 256	bytes of PSP, so this is
     17					     ; necessary to generate a .COM file
     18					     ORG 256
     19
     20
     21				     ; BEGINNING OF THE	MAIN PROCEDURE
     22	0100			     INICIO:
     23					     ; Check input parameters
     24	0100  8A 0E 0080		     MOV CL, DS:[80h]	     ; Load the	size of	the parameters in the command line
     25					     ; No parameters
     26	0104  80 F9 00			     CMP CL, 0
     27	0107  75 06			     JNE NEXT
     28	0109  E8 0275			     CALL STATUS
     29	010C  E9 02C7			     JMP FINAL
     30
     31	010F			     NEXT:
     32					     ; If there	is a parameter,	it must	be 3 bytes long	(space + / + I or space	+ / + U)
     33	010F  80 F9 03			     CMP CL, 3
     34	0112  75 1F			     JNE ERROR
     35	0114  8B 0E 0082		     MOV CX, DS:[82h]
     36	0118  80 F9 2F			     CMP CL, '/'
     37	011B  75 16			     JNE ERROR
     38					     ; /I as parameter
     39	011D  80 FD 49			     CMP CH, 'I'
     40	0120  74 0B			     JE	AUXINSJUMP
     41					     ; /U as parameter
     42	0122  80 FD 55			     CMP CH, 'U'
     43	0125  75 0C			     JNE ERROR
     44	0127  E8 020D			     CALL UNINSTALLER
     45	012A  E9 02A9			     JMP FINAL
     46
     47	012D			     AUXINSJUMP:
     48
     49	012D  E8 0191			     CALL INSTALLER
     50	0130  E9 02A3			     JMP FINAL
     51
     52					     ; Reaching	here means input parameters are	wrong
     53	0133			     ERROR:
     54					     ; Shows this message when there has been an error introducing the parameters
     55	0133  E9 02A0			     JMP FINAL
     56
     57					     ; Print variables for Installation/Uninstallation
Turbo Assembler	 Version 2.0	    05/03/18 02:29:31	    Page 2
p4a.asm



     58	0136  54 68 65 20 64 72	69+	     COINCIDENCEPRINT DB "The driver you are trying to install is already installed", 13,   +
     59	      76 65 72 20 79 6F	75+  10, '$'
     60	      20 61 72 65 20 74	72+
     61	      79 69 6E 67 20 74	6F+
     62	      20 69 6E 73 74 61	6C+
     63	      6C 20 69 73 20 61	6C+
     64	      72 65 61 64 79 20	69+
     65	      6E 73 74 61 6C 6C	65+
     66	      64 0D 0A 24
     67	0172  54 68 65 72 65 20	69+	     CONFLICT DB "There	is another driver at 55h. Do you want to overwrite it? (write y/n)",+
     68	      73 20 61 6E 6F 74	68+  13, 10, '$'
     69	      65 72 20 64 72 69	76+
     70	      65 72 20 61 74 20	35+
     71	      35 68 2E 20 44 6F	20+
     72	      79 6F 75 20 77 61	6E+
     73	      74 20 74 6F 20 6F	76+
     74	      65 72 77 72 69 74	65+
     75	      20 69 74 3F 20 28	77+
     76	      72 69 74 65 20 79	2F+
     77	      6E 29 0D 0A 24
     78	01BD  03*(00)			     ANSWER DB 3 dup(0)
     79					     ; Print variables for Status Case
     80	01C0  54 68 65 20 64 72	69+	     STATUSPRINT1 DB "The driver is currently INSTALLED", 13, 10, '$'
     81	      76 65 72 20 69 73	20+
     82	      63 75 72 72 65 6E	74+
     83	      6C 79 20 49 4E 53	54+
     84	      41 4C 4C 45 44 0D	0A+
     85	      24
     86	01E4  54 68 65 20 64 72	69+	     STATUSPRINT2 DB "The driver is currently UNINSTALLED", 13,	10, '$'
     87	      76 65 72 20 69 73	20+
     88	      63 75 72 72 65 6E	74+
     89	      6C 79 20 55 4E 49	4E+
     90	      53 54 41 4C 4C 45	44+
     91	      0D 0A 24
     92	020A  41 55 54 48 4F 52	53+	     AUTHORS DB	"AUTHORS:", 13,	10, "Emilio Cuesta", 13, 10, "Alejandro	Sanchez", 13, 10 ,  +
     93	      3A 0D 0A 45 6D 69	6C+  "GROUP 2351, TEAM 8", 13, 10,'$'
     94	      69 6F 20 43 75 65	73+
     95	      74 61 0D 0A 41 6C	65+
     96	      6A 61 6E 64 72 6F	20+
     97	      53 61 6E 63 68 65	7A+
     98	      0D 0A 47 52 4F 55	50+
     99	      20 32 33 35 31 2C	20+
    100	      54 45 41 4D 20 38	0D+
    101	      0A 24
    102
    103					     ; Variables for Caesar Cypher
    104	024B  0B			     CODE_NUMBER DB 11	     ; Codification number. We are team	8, so it is 8+3=11
    105	024C  7E			     MAX_VALUE DB 126	     ; Maximum ASCII value we accept (~), in decimal
    106	024D  20			     MIN_VALUE DB 32	     ; Minimum ASCII value we accept (space), in decimal
    107	024E  ???? ????			     PREV_55h DW ?, ?	     ; Variable	to store the routine which was previously installed +
    108				     in	55h of the interrumpt vector
    109
    110	0252				     CAESAR PROC FAR ; INTERRUPT SERVICE ROUTINE
    111						     ; SAVE MODIFIED REGISTERS
    112	0252  56 53 50				     PUSH SI BX	AX
    113						     ; ROUTINE INSTRUCTIONS
    114						     ; We know the string is pointed by	DS:DX
Turbo Assembler	 Version 2.0	    05/03/18 02:29:31	    Page 3
p4a.asm



    115	0255  BE 0000				     MOV SI, 0		     ; Initialize the index
    116	0258  8B DA				     MOV BX, DX
    117						     ; We have to check	AH
    118
    119
    120	025A  80 FC 12				     CMP AH, 12h     ; Encrypt and print
    121	025D  74 12				     JE	ENCRYPT
    122	025F  80 FC 13				     CMP AH, 13h     ; Decrypt and print
    123	0262  74 26				     JE	DECRYPT
    124	0264  80 FC 08				     CMP AH, 08h     ; This is an extra	feature	that will be used to tell us if	the +
    125				     interruption is installed or not
    126	0267  74 03				     JE	DRIVER_PRESENCE
    127	0269  EB 52 90				     JMP FIN
    128
    129	026C				     DRIVER_PRESENCE:
    130
    131	026C  B1 01				     MOV CL, 1		     ; If the interruption is installed, CL will be modified+
    132				     and store a one.
    133										     ; We can assume the person	who uses this	    +
    134				     functionality knows how it	works and
    135										     ; wont have a 1 in	CL before the call.
    136
    137	026E  EB 4D 90				     JMP FIN
    138
    139	0271				     ENCRYPT:
    140	0271  8A 00				     MOV AL, DS:[BX][SI]
    141	0273  3C 24				     CMP AL, '$'
    142	0275  74 42				     JE	PRINT
    143	0277  2E: 02 06	024Br			     ADD AL, CODE_NUMBER
    144	027C  8A E0				     MOV AH, AL
    145	027E  2E: 2A 26	024Cr			     SUB AH, MAX_VALUE
    146	0283  7F 1E				     JG	OVERFLOW
    147	0285				     BACK_ENC:
    148	0285  88 00				     MOV DS:[BX][SI], AL
    149	0287  46				     INC SI
    150	0288  EB E7				     JMP ENCRYPT
    151
    152	028A				     DECRYPT:
    153	028A  8A 00				     MOV AL, DS:[BX][SI]
    154	028C  3C 24				     CMP AL, '$'
    155	028E  74 29				     JE	PRINT
    156	0290  2E: 2A 06	024Br			     SUB AL, CODE_NUMBER
    157	0295  8A E0				     MOV AH, AL
    158	0297  2E: 2A 26	024Dr			     SUB AH, MIN_VALUE
    159	029C  7C 10				     JL	UNDERFLOW
    160	029E				     BACK_DEC:
    161	029E  88 00				     MOV DS:[BX][SI], AL
    162	02A0  46				     INC SI
    163	02A1  EB E7				     JMP DECRYPT
    164
    165	02A3				     OVERFLOW:
    166	02A3  2E: 02 26	024Dr			     ADD AH, MIN_VALUE
    167	02A8  FE CC				     DEC AH
    168	02AA  8A C4				     MOV AL, AH
    169	02AC  EB D7				     JMP BACK_ENC
    170
    171	02AE				     UNDERFLOW:
Turbo Assembler	 Version 2.0	    05/03/18 02:29:31	    Page 4
p4a.asm



    172	02AE  2E: 02 26	024Cr			     ADD AH, MAX_VALUE
    173	02B3  FE C4				     INC AH
    174	02B5  8A C4				     MOV AL, AH
    175	02B7  EB E5				     JMP BACK_DEC
    176
    177	02B9				     PRINT:
    178
    179	02B9  B4 09				     MOV AH, 09h
    180	02BB  CD 21				     INT 21h		     ; Print the string	after processing it. Offset is	    +
    181				     already in	DX
    182
    183						     ; RESTORE MODIFIED	REGISTERS
    184	02BD				     FIN:
    185	02BD  58 5B 5E				     POP AX BX SI
    186	02C0  CF				     IRET
    187	02C1				     CAESAR ENDP
    188
    189	02C1				     INSTALLER PROC
    190	02C1  B8 0000				     MOV AX, 0
    191	02C4  8E C0				     MOV ES, AX
    192	02C6  BB 0252r				     MOV BX, OFFSET CAESAR
    193	02C9  8C C8				     MOV AX, CS
    194
    195						     ; We have to check	if there was a different driver	already	installed in that   +
    196				     position
    197	02CB  B1 00				     MOV CL, 0
    198	02CD  E8 00D2				     CALL CHECK_DRIVER
    199
    200						     ; If there	are no drivers,	we dont	have any problems for the installation
    201	02D0  80 F9 00				     CMP CL, 0
    202	02D3  74 52				     JE	INSTALL
    203
    204						     ; If there	is a different driver, we ask the user what to do with it
    205	02D5  80 F9 02				     CMP CL, 2
    206	02D8  74 09				     JE	OTHER_DRIVER
    207
    208						     ; In any other case, we assume the	installed driver is ours, therefore there is+
    209				     no	need to	reinstall it
    210	02DA  B4 09				     MOV AH, 09h
    211	02DC  BA 0136r				     MOV DX, OFFSET COINCIDENCEPRINT
    212	02DF  CD 21				     INT 21H
    213
    214	02E1				     ERROREND:
    215	02E1  FB				     STI
    216	02E2  C3				     RET
    217
    218	02E3				     OTHER_DRIVER:
    219
    220	02E3  50 53 52				     PUSH AX BX	DX
    221
    222	02E6  BA 0172r				     MOV DX, OFFSET CONFLICT
    223	02E9  B4 09				     MOV AH, 9
    224	02EB  CD 21				     INT 21H
    225
    226						     ; Reading answer from keyboard
    227	02ED  B4 0A				     MOV AH,0AH
    228	02EF  BA 01BDr				     MOV DX, OFFSET ANSWER
Turbo Assembler	 Version 2.0	    05/03/18 02:29:31	    Page 5
p4a.asm



    229	02F2  2E: C6 06	01BDr 02		     MOV ANSWER[0], 2
    230	02F8  CD 21				     INT 21H
    231
    232						     ; Check out if the	MESSAGE'S lenght is not	null
    233	02FA  2E: 8A 1E	01BEr			     MOV BL, ANSWER[1]
    234	02FF  80 FB 00				     CMP BL, 0
    235	0302  74 DD				     JE	ERROREND
    236
    237	0304  5A 5B 58				     POP DX BX AX
    238
    239						     ; Answer check
    240	0307  2E: 80 3E	01BFr 79		     CMP ANSWER[2], 'y'
    241	030D  74 02				     JE	STORE_PREV
    242
    243	030F  EB D0				     JMP ERROREND
    244
    245	0311				     STORE_PREV:
    246	0311  FA				     CLI
    247	0312  26: 8B 0E	0154			     MOV CX, ES:[ 55h*4	]
    248	0317  2E: 89 0E	024Er			     MOV PREV_55h, CX
    249	031C  26: 8B 0E	0156			     MOV CX, ES:[ 55h*4+2 ]
    250	0321  2E: 89 0E	0250r			     MOV PREV_55h+2, CX
    251	0326  FB				     STI
    252
    253	0327				     INSTALL:
    254
    255	0327  FA				     CLI
    256	0328  26: 89 1E	0154			     MOV ES:[ 55h*4 ], BX
    257	032D  26: A3 0156			     MOV ES:[ 55h*4+2 ], AX
    258	0331  FB				     STI
    259	0332  BA 02C1r				     MOV DX, OFFSET INSTALLER
    260	0335  CD 27				     INT 27H ; TERMINATE AND STAY RESIDENT
    261						     ; PSP, VARIABLES, CAESAR ROUTINE.
    262	0337				     INSTALLER ENDP
    263
    264
    265	0337				     UNINSTALLER PROC ;	UNINSTALL CAESAR OF INT	55H
    266	0337  50 53 51 1E 06 57	56		     PUSH AX BX	CX DS ES DI SI
    267	033E  B9 0000				     MOV CX, 0
    268	0341  8E D9				     MOV DS, CX						     ; SEGMENT OF INTERRUPT +
    269				     VECTORS
    270
    271	0343  B1 00				     MOV CL, 0
    272	0345  E8 005A				     CALL CHECK_DRIVER
    273
    274						     ; If there	are no drivers to unistall, we dont do anything
    275	0348  80 F9 00				     CMP CL, 0
    276	034B  74 2C				     JE	UNSEND
    277						     ; If there	is a different driver, we dont unistall	it.
    278						     ; If we needed to,	we can call INSTALL and	we will	be offered to overwrite	the +
    279				     previous installation
    280	034D  80 F9 02				     CMP CL, 2
    281	0350  74 27				     JE	UNSEND
    282
    283						     ; Otherwise, our driver is	installed and we want to uninstall it
    284
    285	0352				     UNINSTALL:
Turbo Assembler	 Version 2.0	    05/03/18 02:29:31	    Page 6
p4a.asm



    286	0352  8B 36 0156			     MOV SI, DS:[ 55h*4+2 ]		     ; READ CAESAR SEGMENT
    287	0356  8E C6				     MOV ES, SI
    288	0358  26: 8B 1E	002C			     MOV BX, ES:[ 2Ch ]				     ; READ SEGMENT OF ENVIRONMENT  +
    289				     FROM CAESAR’S PSP.
    290	035D  B4 49				     MOV AH, 49h
    291	035F  CD 21				     INT 21h						     ; RELEASE CAESAR	    +
    292				     SEGMENT (ES)
    293	0361  8E C3				     MOV ES, BX
    294	0363  CD 21				     INT 21h						     ; RELEASE SEGMENT OF   +
    295				     ENVIRONMENT VARIABLES OF CAESAR
    296
    297						     ; SET VECTOR OF INTERRUPT 55H TO THE DRIVER PREVIOUSLY INSTALLED
    298	0365  FA				     CLI
    299	0366  2E: 8B 0E	024Er			     MOV CX, PREV_55h
    300	036B  89 0E 0154			     MOV DS:[ 55h*4 ], CX
    301	036F  2E: 8B 0E	0250r			     MOV CX, PREV_55h+2
    302	0374  89 0E 0156			     MOV DS:[ 55h*4+2 ], CX
    303	0378  FB				     STI
    304
    305	0379				     UNSEND:
    306
    307	0379  5E 5F 07 1F 59 5B	58		     POP SI DI ES DS CX	BX AX
    308	0380  C3				     RET
    309	0381				     UNINSTALLER ENDP
    310
    311
    312	0381				     STATUS PROC
    313	0381  B1 00				     MOV CL, 0
    314	0383  E8 001C				     CALL CHECK_DRIVER
    315
    316	0386  80 F9 01				     CMP CL, 1
    317						     ; If CL is	1, our driver is correcly installed. (Check CHECK_DRIVER PROC)
    318	0389  74 0A				     JE	INST
    319
    320						     ; In any other case, it is	not correcly installed
    321	038B  BA 01E4r				     MOV DX, OFFSET STATUSPRINT2
    322	038E  B4 09				     MOV AH, 9
    323	0390  CD 21				     INT 21H
    324	0392  EB 08 90				     JMP AUTH
    325
    326	0395				     INST:
    327
    328	0395  BA 01C0r				     MOV DX, OFFSET STATUSPRINT1
    329	0398  B4 09				     MOV AH, 9
    330	039A  CD 21				     INT 21H
    331
    332	039C				     AUTH:
    333
    334	039C  BA 020Ar				     MOV DX, OFFSET AUTHORS
    335	039F  CD 21				     INT 21H
    336	03A1  C3				     RET
    337
    338	03A2				     STATUS ENDP
    339
    340					     ; This function writes on CL
    341					     ; After the execution:
    342					     ; CL = 0 if there isnt any	driver at 55h
Turbo Assembler	 Version 2.0	    05/03/18 02:29:31	    Page 7
p4a.asm



    343					     ; CL = 1 if the installed driver is ours.
    344					     ; CL = 2 if there is a driver, but	it is not ours.
    345	03A2				     CHECK_DRIVER PROC NEAR
    346
    347	03A2  57 56 50 06			     PUSH DI SI	AX ES
    348
    349	03A6  B8 0000				     MOV AX, 0
    350	03A9  8E C0				     MOV ES, AX
    351
    352						     ; We have to check	if there is a driver in	55h
    353						     ; If so, we would like to know if it is our driver
    354	03AB  26: 8B 3E	0154			     MOV DI, ES:[ 55h*4	]
    355	03B0  26: 8B 36	0156			     MOV SI, ES:[ 55h*4	+2 ]
    356						     ; We check	if there are 0s	in the interruption vector
    357	03B5  83 FF 00				     CMP DI, 0
    358	03B8  75 0A				     JNE DRIVER_EXISTS
    359	03BA  83 FE 00				     CMP SI, 0
    360	03BD  75 05				     JNE DRIVER_EXISTS
    361
    362						     ; If we have reached this point it	means there is no driver installed at all.
    363	03BF  B1 00				     MOV CL, 0
    364	03C1  EB 0E 90				     JMP END_CHECK
    365
    366	03C4				     DRIVER_EXISTS:
    367
    368	03C4  B1 00				     MOV CL, 0
    369	03C6  B4 08				     MOV AH, 08h
    370	03C8  CD 55				     INT 55h
    371						     ; If the interruption with	AH = 08h changes CL from 0 to 1, then it should	be  +
    372				     our interruption.
    373	03CA  80 F9 01				     CMP CL, 1
    374	03CD  74 02				     JE	END_CHECK
    375
    376						     ; The other possible case is: there is a driver, but it isnt the one we want.
    377	03CF  B1 02				     MOV CL, 2
    378
    379	03D1				     END_CHECK:
    380	03D1  07 58 5E 5F			     POP ES AX SI DI
    381	03D5  C3				     RET
    382
    383	03D6				     CHECK_DRIVER ENDP
    384
    385	03D6				     FINAL:
    386						     ; END THE PROGRAM
    387	03D6  B8 4C00				     MOV AX, 4C00h
    388	03D9  CD 21				     INT 21h
    389
    390				     ; END OF CODE SEGMENT
    391	03DB			     CODE ENDS
    392				     ; END OF PROGRAM.
    393				     END INICIO
Turbo Assembler	 Version 2.0	    05/03/18 02:29:31	    Page 8
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "05/03/18"
??FILENAME			  Text	 "p4a	  "
??TIME				  Text	 "02:29:31"
??VERSION			  Number 0200
@CPU				  Text	 0101H
@CURSEG				  Text	 CODE
@FILENAME			  Text	 P4A
@WORDSIZE			  Text	 2
ANSWER				  Byte	 CODE:01BD
AUTH				  Near	 CODE:039C
AUTHORS				  Byte	 CODE:020A
AUXINSJUMP			  Near	 CODE:012D
BACK_DEC			  Near	 CODE:029E
BACK_ENC			  Near	 CODE:0285
CAESAR				  Far	 CODE:0252
CHECK_DRIVER			  Near	 CODE:03A2
CODE_NUMBER			  Byte	 CODE:024B
COINCIDENCEPRINT		  Byte	 CODE:0136
CONFLICT			  Byte	 CODE:0172
DECRYPT				  Near	 CODE:028A
DRIVER_EXISTS			  Near	 CODE:03C4
DRIVER_PRESENCE			  Near	 CODE:026C
ENCRYPT				  Near	 CODE:0271
END_CHECK			  Near	 CODE:03D1
ERROR				  Near	 CODE:0133
ERROREND			  Near	 CODE:02E1
FIN				  Near	 CODE:02BD
FINAL				  Near	 CODE:03D6
INICIO				  Near	 CODE:0100
INST				  Near	 CODE:0395
INSTALL				  Near	 CODE:0327
INSTALLER			  Near	 CODE:02C1
MAX_VALUE			  Byte	 CODE:024C
MIN_VALUE			  Byte	 CODE:024D
NEXT				  Near	 CODE:010F
OTHER_DRIVER			  Near	 CODE:02E3
OVERFLOW			  Near	 CODE:02A3
PREV_55H			  Word	 CODE:024E
PRINT				  Near	 CODE:02B9
STATUS				  Near	 CODE:0381
STATUSPRINT1			  Byte	 CODE:01C0
STATUSPRINT2			  Byte	 CODE:01E4
STORE_PREV			  Near	 CODE:0311
UNDERFLOW			  Near	 CODE:02AE
UNINSTALL			  Near	 CODE:0352
UNINSTALLER			  Near	 CODE:0337
UNSEND				  Near	 CODE:0379

Groups & Segments		  Bit Size Align  Combine Class

CODE				  16  03DB Para	  none
